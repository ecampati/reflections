What happens when you initialize a repository? Why do you need to do it?
Git creates all hidden data needed to track changes and maintain commits...
From now on it is possible to manage file changes with git.


How is the staging area different from the working directory and the repository?
What value do you think it offers?
Files in staging area is ready to be commited...
I think that the staging area offers the possibility to add one file at a time,
waiting to finish changes and commit.


How can you use the staging area to make sure you have one commit per logical
change?
I made several changes... I choose a logical change and put the related files
into the staging area, then check the changes I've made compared the latest
commit and at this point commit the change.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Using branches I can create experimental version of my work whithout affecting
the main one. 
At any moment I can go back to main version to, i.e., fix a bug.
At a later time I can decide to merge experimental version on the main one.


How do the diagrams help you visualize the branch structure?
With a diagram I can figure better the branches structure; this can be very
useful in case of merging branches...


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
The result is to have a new commit with the functionalities of the two branches.
We merge a branch into another and in the diagram we represent it converging
a branch into another that continue to exist (the branch merged can be deleted).


What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
I think that Git's automatic merging is a great help for the developer,
considering that it leaves to developer the task of solving any conflicts 
because certain operations are better done by hand ;-)


Commands:
git add  										| Add a file to the staging area
git commit  									| Commit the files from the staging area to the repository 
git status  									| Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  										| Git diff without arguments is comparing the working directory with the staging area
git diff --staged  								| Compare the staging area with the repository
git reset --hard  								| Undo all changes! There is no rollback for this, so be carefull!
git checkout master								| Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>	| Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  				| Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  						| Merge two branches, branch2 get merged into branch1
git branch -d name  							| Remove the branch with the specified name
git show commitId 								| Show the changes made in this commit compared to the previous version. This is working even after merging.

